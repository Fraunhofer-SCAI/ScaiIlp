#pragma once

enum class SolverExitCode
{
    ok = 0,

    // According to https://stackoverflow.com/questions/4344923/process-exit-code-when-process-is-killed-forcibly
    killed_via_task_manager = 1,

    // Exit codes that we observed when CBC crashed
    // --------------------------------------------
    // The usual reason for CBC to crash is when a thread runs out of memory and/or throws an exception which is not caught.
    // To google for an exit code, converting to hex usually gives better results.
    // See assertions below for the hex codes.

    // Observed for stack buffer overflow on Windows 7.
    uncaught_exception_1 = 3,

    // According to https://support.microsoft.com/de-de/help/185294/prb-exception-code-0xe06d7363-when-calling-win32-seh-apis:
    // - When you call Win32 Structured Exception Handling (SEH) APIs, sometimes the system reports this exception code.
    // - All Visual C++ exceptions thrown from code generated by the Microsoft Visual C++ compiler contain this error code.
    // - The code is actually a cryptic mnemonic device, with the initial "E" standing for "exception" and the final 3 bytes (0x6D7363) representing the ASCII values of "msc".
    // According to http://www.primegrid.com/forum_thread.php?id=693 especially related to "Out Of Memory (C++ Exception).
    uncaught_exception_2 = -529697949,

    // Observed for stack buffer overflow on Windows 10.
    // Google also points to stack buffer overflow.
    uncaught_exception_3 = -1073740791,
    // heap corruption, possibly overflow, too.
    uncaught_exception_4 = -1073740940,
    // access violation, see https://stackoverflow.com/questions/17168982/exception-error-c0000005-in-vc
    uncaught_exception_5 = -1073741819,

    // occurs when ScaiIlpExe.exe is missing a DLL
    missing_dll = -1073741515,

    // Our own exit codes, starting from an arbitrary value that is unlikely to be used by Windows for internal codes
    // --------------------------------------------------------------------------------------------------------------
    out_of_memory        = 14142,
    command_line_error,
    shared_memory_error,
    model_error,
    solver_error,
    forced_termination,
    invalid_start_solution,
    stub_tester_failed
};

static_assert (static_cast<int>(SolverExitCode::uncaught_exception_1) == 0x00000003);
static_assert (static_cast<int>(SolverExitCode::uncaught_exception_2) == 0xE06D7363);
static_assert (static_cast<int>(SolverExitCode::uncaught_exception_3) == 0xC0000409);
static_assert (static_cast<int>(SolverExitCode::uncaught_exception_4) == 0xC0000374);
static_assert (static_cast<int>(SolverExitCode::uncaught_exception_5) == 0xC0000005);
static_assert (static_cast<int>(SolverExitCode::missing_dll)          == 0xC0000135);
